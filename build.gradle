plugins {
	id 'java'
	id 'eclipse'
	id 'maven'
    id 'org.springframework.boot' version '1.5.6.RELEASE'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'com.dubyatoo.edu'

ext {
    mainClassName = 'edu.hail.BootApplication'
    applicationName = 'HailToo'
}

configurations {
	providedRuntime
}

jar {
	baseName = "${applicationName}"
	version = null
}

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator') 
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('io.jsonwebtoken:jjwt:0.6.0')
    compile('com.google.code.gson:gson:2.6.2')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.easymock:easymock:3.4')
	testCompile('org.mockito:mockito-all:1.10.19')
	providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
}

bootRun {
    //deploy static resources in-place
	addResources = true
}

uploadArchives {
    repositories.mavenDeployer {
        //configuration = configurations.deployerJars
        if(deploymentEnabled()) {
        	repository(url: "scp://${deployUrl}/${deployPath}") {
            	authentication(userName: "${deployUser}", privateKey: "${deployKey}")
        	}
        }
    }
}

task deploy(type: Exec) {
	dependsOn build
	def cmd = ""
	executable "sh"
	if(deploymentEnabled()) {
		cmd = "ssh -i $deployKey $deployUser@$deployUrl '\
					mkdir -p /home/$deployUser/jarchive;\
					kill -9 \$(cat /home/$deployUser/boot.pid); \
					mv /home/$deployUser/HailToo-*.jar /home/$deployUser/jarchive/ || true;';\
				scp -i $deployKey build/libs/HailToo-${version}.jar $deployUser@$deployUrl:$deployPath;\
				ssh -i $deployKey $deployUser@$deployUrl '\
					nohup java -jar /home/$deployUser/HailToo-${version}.jar </dev/null >/home/$deployUser/boot.out 2>&1 & echo \$! >/home/$deployUser/boot.pid'"
	} else {
		cmd = "echo 'Unable to deploy without neccessary values in gradle.properties.' && false;"
	}
	args "-c", cmd
}

def deploymentEnabled() {
 return project.hasProperty('deployUrl') && project.hasProperty('deployPath') && project.hasProperty('deployUser') && project.hasProperty('deployKey')
}

task containerize(type: Exec) {
	dependsOn build
	executable "sh"
	args "-c", "docker build -t ${project.group}/$applicationName:$version .".toLowerCase()
}